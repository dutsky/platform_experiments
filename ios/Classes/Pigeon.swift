// Autogenerated from Pigeon (v9.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

/// Generated class from Pigeon that represents data sent in messages.
struct Operands {
  var first: Int64
  var second: Int64

  static func fromList(_ list: [Any]) -> Operands? {
    let first = list[0] as! Int64
    let second = list[1] as! Int64

    return Operands(
      first: first,
      second: second
    )
  }
  func toList() -> [Any?] {
    return [
      first,
      second,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct IntegerOperationResult {
  var result: Int64

  static func fromList(_ list: [Any]) -> IntegerOperationResult? {
    let result = list[0] as! Int64

    return IntegerOperationResult(
      result: result
    )
  }
  func toList() -> [Any?] {
    return [
      result,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DoubleOperationResult {
  var result: Double

  static func fromList(_ list: [Any]) -> DoubleOperationResult? {
    let result = list[0] as! Double

    return DoubleOperationResult(
      result: result
    )
  }
  func toList() -> [Any?] {
    return [
      result,
    ]
  }
}

private class CalculatorApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return DoubleOperationResult.fromList(self.readValue() as! [Any])
      case 129:
        return IntegerOperationResult.fromList(self.readValue() as! [Any])
      case 130:
        return Operands.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class CalculatorApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DoubleOperationResult {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? IntegerOperationResult {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? Operands {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class CalculatorApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CalculatorApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CalculatorApiCodecWriter(data: data)
  }
}

class CalculatorApiCodec: FlutterStandardMessageCodec {
  static let shared = CalculatorApiCodec(readerWriter: CalculatorApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CalculatorApi {
  func multiply(operands: Operands, completion: @escaping (Result<IntegerOperationResult, Error>) -> Void)
  func divide(operands: Operands, completion: @escaping (Result<DoubleOperationResult, Error>) -> Void)
  func add(operands: Operands, completion: @escaping (Result<IntegerOperationResult, Error>) -> Void)
  func subtract(operands: Operands, completion: @escaping (Result<IntegerOperationResult, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CalculatorApiSetup {
  /// The codec used by CalculatorApi.
  static var codec: FlutterStandardMessageCodec { CalculatorApiCodec.shared }
  /// Sets up an instance of `CalculatorApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CalculatorApi?) {
    let multiplyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CalculatorApi.multiply", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      multiplyChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let operandsArg = args[0] as! Operands
        api.multiply(operands: operandsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      multiplyChannel.setMessageHandler(nil)
    }
    let divideChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CalculatorApi.divide", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      divideChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let operandsArg = args[0] as! Operands
        api.divide(operands: operandsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      divideChannel.setMessageHandler(nil)
    }
    let addChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CalculatorApi.add", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let operandsArg = args[0] as! Operands
        api.add(operands: operandsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      addChannel.setMessageHandler(nil)
    }
    let subtractChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CalculatorApi.subtract", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      subtractChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let operandsArg = args[0] as! Operands
        api.subtract(operands: operandsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      subtractChannel.setMessageHandler(nil)
    }
  }
}
